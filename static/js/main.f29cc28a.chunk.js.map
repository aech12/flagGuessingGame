{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","_ref","onSubmit","options","onChange","selectedOption","react_default","a","createElement","className","type","name","value","concat","checked","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandomCountries","allCountries","state","i","Math","floor","random","length","pickRadio","e","setState","target","handleSubmit","preventDefault","showAnswerScreen","showAnswer","checkCorrectOpt","correctOption","onClick","showNextQuestion","Array","fill","flag","undefined","componentDidMount","displayPage","setTimeout","components_Square","alt","src","_this2","fetch","then","d","json","Component","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f29cc28a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './All.css'\r\n\r\nconst Square = ({onSubmit, options, onChange, selectedOption}) => {\r\n  return (\r\n    <div className='gamepage'>\r\n      <form className='form' onSubmit={onSubmit}>\r\n        <input \r\n          type='radio' name='opt' \r\n          value={`${options[0].name}`}\r\n          checked={selectedOption===`${options[0].name}`}\r\n          onChange={onChange}\r\n        />\r\n        <p className='inline'>{options[0].name}</p>\r\n\r\n        <input \r\n          type='radio' name='opt' \r\n          value={`${options[1].name}`}\r\n          checked={selectedOption===`${options[1].name}`}\r\n          onChange={onChange}\r\n        />\r\n        <p className='inline'>{options[1].name}</p>\r\n\r\n        <input \r\n          type='radio' name='opt' \r\n          value={`${options[2].name}`}\r\n          checked={selectedOption===`${options[2].name}`}\r\n          onChange={onChange}\r\n        />\r\n        <p className='inline'>{options[2].name}</p>\r\n\r\n        <input \r\n          type='radio' name='opt' \r\n          value={`${options[3].name}`}\r\n          checked={selectedOption===`${options[3].name}`}\r\n          onChange={onChange}\r\n        />\r\n        <p className='inline'>{options[3].name}</p>\r\n        <button className='submitbutton' type='submit'>Guess</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Square","import React, {Component} from 'react';\r\nimport './All.css'\r\nimport Square from './Square';\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      options: Array(4).fill({name:'Country'}),\r\n      correctOption: {flag: 'flag'},\r\n      selectedOption: undefined,\r\n      showAnswerScreen: 'loading'\r\n    }\r\n  }\r\n  componentDidMount() {\r\n      fetch('http://restcountries.eu/rest/v2/all')\r\n        .then(d=> d.json())\r\n        .then(d=> {\r\n          const options = this.getRandomCountries(d);\r\n          const correctOption = options[Math.floor(Math.random()*4)]\r\n          this.setState({\r\n            options,\r\n            correctOption,\r\n          })\r\n        })\r\n    }\r\n\r\n  getRandomCountries = (allCountries) => {\r\n    let options = this.state.options;\r\n    for (let i=0; i<4; i++) {\r\n      options[i] = \r\n      allCountries[Math.floor(Math.random()*allCountries.length)]\r\n    }\r\n    return options;\r\n  }\r\n\r\n  pickRadio = (e) => {\r\n    this.setState({selectedOption: e.target.value})\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.setState({showAnswerScreen: 'next'})\r\n  }\r\n  showAnswer = () => {\r\n    if (this.checkCorrectOpt()) {\r\n      return (\r\n        <div>\r\n          <h3>{`Right! Answer is: ${this.state.correctOption.name}`}</h3>\r\n          <button onClick={this.showNextQuestion}>Next</button>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h3>{`Wrong! Answer is: ${this.state.correctOption.name}`}</h3>\r\n          <button onClick={this.showNextQuestion}>Try again</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  showNextQuestion = () => {\r\n    this.setState({\r\n      showAnswerScreen: 'loading',\r\n      options: Array(4).fill({name:'Country'}),\r\n      correctOption: {flag: 'flag'},\r\n      selectedOption: undefined,\r\n    })\r\n    this.componentDidMount();\r\n  }\r\n\r\n  checkCorrectOpt = () => {\r\n    if (`${this.state.selectedOption}`===`${this.state.correctOption.name}`)\r\n    {return true} else {return false}\r\n  }\r\n  \r\n  displayPage = () => {\r\n    let flag = this.state.correctOption.flag;\r\n    switch(this.state.showAnswerScreen) {\r\n      case 'loading':\r\n        return(\r\n          <div className='loading'>\r\n            {<h1>Loading..</h1>}\r\n            {setTimeout(()=>{\r\n              this.setState({showAnswerScreen: 'game'})\r\n            }, 500)}\r\n          </div>\r\n        )\r\n        break;\r\n      case 'game':\r\n        return (\r\n          <div>\r\n              <Square \r\n                onSubmit={this.handleSubmit} \r\n                options={this.state.options}\r\n                selectedOption={this.state.selectedOption}\r\n                onChange={this.pickRadio}\r\n              />\r\n              <img className='flag' alt='flag' src={`${flag}`} />\r\n            </div>\r\n        )\r\n        break;\r\n      case 'next': \r\n        return (\r\n          <div>\r\n              {this.showAnswer()}\r\n            </div>\r\n        )\r\n        break\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.displayPage()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\n// import './components/All.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='game'>\n        <Board/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}