{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","_ref","onSubmit","options","onChange","selectedOption","react_default","a","createElement","className","type","name","value","concat","checked","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRandomCountries","allCountries","state","i","Math","floor","random","length","pickRadio","e","setState","target","handleSubmit","preventDefault","showAnswerScreen","showAnswer","checkCorrectOpt","correctOption","onClick","showNextQuestion","Array","fill","flag","undefined","componentDidMount","displayPage","setTimeout","components_Square","alt","src","_this2","fetch","then","d","json","Component","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMA6CeA,QA1CA,SAAAC,GAAmD,IAAjDC,EAAiDD,EAAjDC,SAAUC,EAAuCF,EAAvCE,QAASC,EAA8BH,EAA9BG,SAAUC,EAAoBJ,EAApBI,eAC5C,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOP,SAAUA,GAC/BI,EAAAC,EAAAC,cAAA,SACEE,KAAK,QAAQC,KAAK,MAClBC,MAAK,GAAAC,OAAKV,EAAQ,GAAGQ,MACrBG,QAAST,IAAc,GAAAQ,OAAMV,EAAQ,GAAGQ,MACxCP,SAAUA,IAEZE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUN,EAAQ,GAAGQ,MAElCL,EAAAC,EAAAC,cAAA,SACEE,KAAK,QAAQC,KAAK,MAClBC,MAAK,GAAAC,OAAKV,EAAQ,GAAGQ,MACrBG,QAAST,IAAc,GAAAQ,OAAMV,EAAQ,GAAGQ,MACxCP,SAAUA,IAEZE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUN,EAAQ,GAAGQ,MAElCL,EAAAC,EAAAC,cAAA,SACEE,KAAK,QAAQC,KAAK,MAClBC,MAAK,GAAAC,OAAKV,EAAQ,GAAGQ,MACrBG,QAAST,IAAc,GAAAQ,OAAMV,EAAQ,GAAGQ,MACxCP,SAAUA,IAEZE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUN,EAAQ,GAAGQ,MAElCL,EAAAC,EAAAC,cAAA,SACEE,KAAK,QAAQC,KAAK,MAClBC,MAAK,GAAAC,OAAKV,EAAQ,GAAGQ,MACrBG,QAAST,IAAc,GAAAQ,OAAMV,EAAQ,GAAGQ,MACxCP,SAAUA,IAEZE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAUN,EAAQ,GAAGQ,MAClCL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeC,KAAK,UAAtC,aCkFOK,cAnHb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAqBRQ,mBAAqB,SAACC,GAEpB,IADA,IAAItB,EAAUc,EAAKS,MAAMvB,QAChBwB,EAAE,EAAGA,EAAE,EAAGA,IACjBxB,EAAQwB,GACRF,EAAaG,KAAKC,MAAMD,KAAKE,SAASL,EAAaM,SAErD,OAAO5B,GA5BUc,EA+BnBe,UAAY,SAACC,GACXhB,EAAKiB,SAAS,CAAC7B,eAAgB4B,EAAEE,OAAOvB,SAhCvBK,EAkCnBmB,aAAe,SAACH,GACdA,EAAEI,iBACFpB,EAAKiB,SAAS,CAACI,iBAAkB,UApChBrB,EAsCnBsB,WAAa,WACX,OAAItB,EAAKuB,kBAELlC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BAAAK,OAA0BI,EAAKS,MAAMe,cAAc9B,OACnDL,EAAAC,EAAAC,cAAA,UAAQkC,QAASzB,EAAK0B,kBAAtB,SAKFrC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BAAAK,OAA0BI,EAAKS,MAAMe,cAAc9B,OACnDL,EAAAC,EAAAC,cAAA,UAAQkC,QAASzB,EAAK0B,kBAAtB,eAlDW1B,EAwDnB0B,iBAAmB,WACjB1B,EAAKiB,SAAS,CACZI,iBAAkB,UAClBnC,QAASyC,MAAM,GAAGC,KAAK,CAAClC,KAAK,YAC7B8B,cAAe,CAACK,KAAM,QACtBzC,oBAAgB0C,IAElB9B,EAAK+B,qBA/DY/B,EAkEnBuB,gBAAkB,WAChB,MAAI,GAAA3B,OAAGI,EAAKS,MAAMrB,kBAAd,GAAAQ,OAAoCI,EAAKS,MAAMe,cAAc9B,OAnEhDM,EAuEnBgC,YAAc,WACZ,IAAIH,EAAO7B,EAAKS,MAAMe,cAAcK,KACpC,OAAO7B,EAAKS,MAAMY,kBAChB,IAAK,UACH,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZH,EAAAC,EAAAC,cAAA,uBACA0C,WAAW,WACVjC,EAAKiB,SAAS,CAACI,iBAAkB,UAChC,MAIT,IAAK,OACH,OACEhC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC2C,EAAD,CACEjD,SAAUe,EAAKmB,aACfjC,QAASc,EAAKS,MAAMvB,QACpBE,eAAgBY,EAAKS,MAAMrB,eAC3BD,SAAUa,EAAKe,YAEjB1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAO2C,IAAI,OAAOC,IAAG,GAAAxC,OAAKiC,MAIjD,IAAK,OACH,OACExC,EAAAC,EAAAC,cAAA,WACKS,EAAKsB,gBAlGhBtB,EAAKS,MAAQ,CACXvB,QAASyC,MAAM,GAAGC,KAAK,CAAClC,KAAK,YAC7B8B,cAAe,CAACK,KAAM,QACtBzC,oBAAgB0C,EAChBT,iBAAkB,WANHrB,mFASC,IAAAqC,EAAAlC,KAChBmC,MAAM,wCACHC,KAAK,SAAAC,GAAC,OAAGA,EAAEC,SACXF,KAAK,SAAAC,GACJ,IAAMtD,EAAUmD,EAAK9B,mBAAmBiC,GAClChB,EAAgBtC,EAAQyB,KAAKC,MAAoB,EAAdD,KAAKE,WAC9CwB,EAAKpB,SAAS,CACZ/B,UACAsC,qDA0FR,OACEnC,EAAAC,EAAAC,cAAA,WACGY,KAAK6B,sBA9GMU,aCULC,mLARX,OACEtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACqD,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAAQC,SAASC,eAAe,SDuH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.6fcbdda0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './All.css'\r\n\r\nconst Square = ({onSubmit, options, onChange, selectedOption}) => {\r\n  return (\r\n    <div className='gamepage'>\r\n      <form className='form' onSubmit={onSubmit}>\r\n        <input \r\n          type='radio' name='opt' \r\n          value={`${options[0].name}`}\r\n          checked={selectedOption===`${options[0].name}`}\r\n          onChange={onChange}\r\n        />\r\n        <p className='inline'>{options[0].name}</p>\r\n\r\n        <input \r\n          type='radio' name='opt' \r\n          value={`${options[1].name}`}\r\n          checked={selectedOption===`${options[1].name}`}\r\n          onChange={onChange}\r\n        />\r\n        <p className='inline'>{options[1].name}</p>\r\n\r\n        <input \r\n          type='radio' name='opt' \r\n          value={`${options[2].name}`}\r\n          checked={selectedOption===`${options[2].name}`}\r\n          onChange={onChange}\r\n        />\r\n        <p className='inline'>{options[2].name}</p>\r\n\r\n        <input \r\n          type='radio' name='opt' \r\n          value={`${options[3].name}`}\r\n          checked={selectedOption===`${options[3].name}`}\r\n          onChange={onChange}\r\n        />\r\n        <p className='inline'>{options[3].name}</p>\r\n        <button className='submitbutton' type='submit'>Guess</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Square","import React, {Component} from 'react';\r\nimport './All.css'\r\nimport Square from './Square';\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      options: Array(4).fill({name:'Country'}),\r\n      correctOption: {flag: 'flag'},\r\n      selectedOption: undefined,\r\n      showAnswerScreen: 'loading'\r\n    }\r\n  }\r\n  componentDidMount() {\r\n      fetch('https://restcountries.eu/rest/v2/all')\r\n        .then(d=> d.json())\r\n        .then(d=> {\r\n          const options = this.getRandomCountries(d);\r\n          const correctOption = options[Math.floor(Math.random()*4)]\r\n          this.setState({\r\n            options,\r\n            correctOption,\r\n          })\r\n        })\r\n    }\r\n\r\n  getRandomCountries = (allCountries) => {\r\n    let options = this.state.options;\r\n    for (let i=0; i<4; i++) {\r\n      options[i] = \r\n      allCountries[Math.floor(Math.random()*allCountries.length)]\r\n    }\r\n    return options;\r\n  }\r\n\r\n  pickRadio = (e) => {\r\n    this.setState({selectedOption: e.target.value})\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.setState({showAnswerScreen: 'next'})\r\n  }\r\n  showAnswer = () => {\r\n    if (this.checkCorrectOpt()) {\r\n      return (\r\n        <div>\r\n          <h3>{`Right! Answer is: ${this.state.correctOption.name}`}</h3>\r\n          <button onClick={this.showNextQuestion}>Next</button>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h3>{`Wrong! Answer is: ${this.state.correctOption.name}`}</h3>\r\n          <button onClick={this.showNextQuestion}>Try again</button>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  showNextQuestion = () => {\r\n    this.setState({\r\n      showAnswerScreen: 'loading',\r\n      options: Array(4).fill({name:'Country'}),\r\n      correctOption: {flag: 'flag'},\r\n      selectedOption: undefined,\r\n    })\r\n    this.componentDidMount();\r\n  }\r\n\r\n  checkCorrectOpt = () => {\r\n    if (`${this.state.selectedOption}`===`${this.state.correctOption.name}`)\r\n    {return true} else {return false}\r\n  }\r\n  \r\n  displayPage = () => {\r\n    let flag = this.state.correctOption.flag;\r\n    switch(this.state.showAnswerScreen) {\r\n      case 'loading':\r\n        return(\r\n          <div className='loading'>\r\n            {<h1>Loading..</h1>}\r\n            {setTimeout(()=>{\r\n              this.setState({showAnswerScreen: 'game'})\r\n            }, 500)}\r\n          </div>\r\n        )\r\n        break;\r\n      case 'game':\r\n        return (\r\n          <div>\r\n              <Square \r\n                onSubmit={this.handleSubmit} \r\n                options={this.state.options}\r\n                selectedOption={this.state.selectedOption}\r\n                onChange={this.pickRadio}\r\n              />\r\n              <img className='flag' alt='flag' src={`${flag}`} />\r\n            </div>\r\n        )\r\n        break;\r\n      case 'next': \r\n        return (\r\n          <div>\r\n              {this.showAnswer()}\r\n            </div>\r\n        )\r\n        break\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.displayPage()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\n// import './components/All.css';\r\nimport Board from './components/Board';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='game'>\r\n        <Board/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}